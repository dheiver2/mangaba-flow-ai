interface ApiKeyConfig {
  geminiApiKey?: string;
  openaiApiKey?: string;
  anthropicApiKey?: string;
}

export class ApiKeyManager {
  private static STORAGE_KEY = 'mangaba_api_keys';

  static getApiKeys(): ApiKeyConfig {
    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      return stored ? JSON.parse(stored) : {};
    } catch {
      return {};
    }
  }

  static setApiKey(provider: keyof ApiKeyConfig, apiKey: string) {
    const config = this.getApiKeys();
    config[provider] = apiKey;
    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(config));
  }

  static hasGeminiKey(): boolean {
    const config = this.getApiKeys();
    return !!(config.geminiApiKey && config.geminiApiKey.trim().length > 0);
  }

  static getGeminiKey(): string | null {
    const config = this.getApiKeys();
    return config.geminiApiKey || null;
  }

  static clearApiKeys() {
    localStorage.removeItem(this.STORAGE_KEY);
  }
}

export class GeminiService {
  private static async callGemini(input: string, config: any = {}): Promise<string> {
    const apiKey = ApiKeyManager.getGeminiKey();
    
    if (!apiKey) {
      throw new Error('Gemini API key not configured. Please add your API key in settings.');
    }

    const prompt = config.prompt || 'You are a helpful AI assistant. Process the following input and provide a useful response.';
    const fullPrompt = `${prompt}\n\nInput: ${input}`;

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: fullPrompt
            }]
          }],
          generationConfig: {
            temperature: config.temperature || 0.7,
            topK: config.topK || 40,
            topP: config.topP || 0.95,
            maxOutputTokens: config.maxTokens || 1024,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`Gemini API error: ${response.status} - ${errorData}`);
      }

      const data = await response.json();
      
      if (!data.candidates || data.candidates.length === 0) {
        throw new Error('No response generated by Gemini');
      }

      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      if (error instanceof Error && error.message.includes('API')) {
        throw error;
      }
      throw new Error(`Failed to connect to Gemini API: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  static async processText(input: string, config: any = {}): Promise<string> {
    return this.callGemini(input, config);
  }
}

export class ToolService {
  static async executeWebSearch(query: string): Promise<any> {
    // Mock implementation - in a real app you'd integrate with search APIs
    await this.delay(1000);
    
    return {
      query,
      results: [
        {
          title: `Search result for "${query}"`,
          url: `https://example.com/search?q=${encodeURIComponent(query)}`,
          snippet: `This is a search result for the query: ${query}. Results would come from a real search API.`
        },
        {
          title: `More information about "${query}"`,
          url: `https://example.org/info/${encodeURIComponent(query)}`,
          snippet: `Additional context and details about ${query} from various web sources.`
        }
      ],
      timestamp: new Date().toISOString()
    };
  }

  static async executeDatabaseQuery(query: string): Promise<any> {
    // Mock implementation
    await this.delay(800);
    
    return {
      query,
      result: `Database query executed: ${query}`,
      rows: [
        { id: 1, data: `Mock data for ${query}` },
        { id: 2, data: `Additional data related to ${query}` }
      ],
      timestamp: new Date().toISOString()
    };
  }

  static async executeApiCall(endpoint: string, config: any = {}): Promise<any> {
    // Mock implementation
    await this.delay(600);
    
    return {
      url: endpoint,
      method: config.method || 'GET',
      response: {
        status: 200,
        data: `Mock API response for ${config.method || 'GET'} ${endpoint}`,
        timestamp: new Date().toISOString()
      }
    };
  }

  private static delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}